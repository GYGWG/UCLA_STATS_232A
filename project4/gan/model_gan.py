from __future__ import division
import os
import time
import math
from glob import glob
import tensorflow as tf
import numpy as np
from six.moves import xrange

from ops import *
from utils import *

class DCGAN(object):
    def __init__(self, sess, input_size=28,
                 batch_size=64, sample_num=64, output_size=28,
                 z_dim=62, c_dim=1, dataset_name='default',
                 checkpoint_dir=None, sample_dir=None):
        """

        Args:
          sess: TensorFlow session
          input_size: The size of input image.
          batch_size: The size of batch. Should be specified before training.
          z_dim: (optional) Dimension of dim for Z. [100]
          c_dim: (optional) Dimension of image color. For grayscale input, set to 1. [1]
        """
        self.sess = sess

        self.batch_size = batch_size
        self.sample_num = sample_num

        self.input_size = input_size
        self.output_size = output_size

        self.z_dim = z_dim
        self.c_dim = c_dim

        self.dataset_name = dataset_name
        self.checkpoint_dir = checkpoint_dir

        self.counter = 1

        self.build_model()

    def discriminator(self, image, reuse=False, train=True):
        with tf.variable_scope("discriminator", reuse=reuse):
            #######################################################
            # TODO: Define discrminator network structure here. op.py
            # includes some basic layer functions for you to use.
            # Please use batch normalization layer after conv layer.
            # And use 'train' argument to indicate the mode of bn.
            #######################################################
            d = lrelu(conv2d(image, 32, 4, 4, 2, 2, name="d_conv1"), name="d_lrelu1")
            # self.d1_shape = d.shape
            d = lrelu(batch_norm(conv2d(d, 64, 4, 4, 2, 2, name="d_conv2"), train=train, name="d_bn2"), name="d_lrelu2")
            # self.d2_shape = d.shape
            d = lrelu(batch_norm(conv2d(d, 256, 4, 4, 2, 2, name="d_conv2_1"), train=train, name="d_2_1_bn"),
                      name="d_2_1_lrelu")
            d = tf.reshape(d, [self.batch_size, -1])
            # self.d2_flat_shape = d.shape
            d = lrelu(batch_norm(linear(d, 512, 'd_conv3'), train=train, name="d_bn3"), name="d_lrelu3")
            # self.d3_shape = d.shape
            out_logit = linear(d, 1, "d_fc4")
            out = tf.nn.sigmoid(out_logit)

            return out, out_logit

            #######################################################
            #                   end of your code
            #######################################################

    def generator(self, z, reuse=False, train=True):
        with tf.variable_scope("generator", reuse=reuse):
            #######################################################
            # TODO: Define decoder network structure here. The size
            # of output should match the size of images. Image scale
            # in DCGAN is [-1, +1], so you need to add a tanh layer
            # before the output. Also use batch normalization layer
            # after deconv layer, and use 'train' argument to indicate
            # the mode of bn layer. Note that when sampling images
            # using trained model, you need to set train='False'.
            #######################################################
            g = tf.nn.relu(batch_norm(linear(z, 1024, "g_fc1"), train=train, name="g_bn1"))
            g = tf.nn.relu(batch_norm(linear(g, 128*7*7, "g_fc2"), train=train, name="g_bn2"))
            g = tf.reshape(g, [self.batch_size, 7, 7, 128])
            g = tf.nn.relu(batch_norm(deconv2d(g, [self.batch_size, 14, 14, 64], 4, 4, 2, 2, name="g_deconv3"),
                                      train=train, name="g_bn3"))
            g = tf.nn.sigmoid(deconv2d(g, [self.batch_size, 28, 28, 1], 4, 4, 2, 2, name="g_deconv4"))

            return g
            #######################################################
            #                   end of your code
            #######################################################

    def build_model(self):
        #######################################################
        # TODO: In this build_model function, define inputs,
        # operations on inputs and loss of DCGAN. For input,
        # you need to define it as placeholders. Discriminator
        # loss has two parts: cross entropy for real images and
        # cross entropy for fake images generated by generator.
        # Set reuse=True for discriminator when calculating the
        # second cross entropy. Define two different loss terms
        # for discriminator and generator, and save them as
        # self.d_loss and self.g_loss respectively.
        #######################################################
        # Inputs
        self.x = tf.placeholder(tf.float32, shape=[self.batch_size, self.input_size, self.input_size, self.c_dim],
                                name='real_images')
        self.z = tf.placeholder(tf.float32, shape=[self.batch_size, self.z_dim], name='z')

        # Gaussian White noise for training
        g_noise = tf.random_normal(shape=self.x.shape, mean=0, stddev= 1 / (self.counter**0.5))

        # Real data with Discriminator
        D_real, D_real_logits = self.discriminator(self.x + g_noise, train=True, reuse=False) #

        # Fake data from Generator with Discriminator
        G = self.generator(self.z, train=True, reuse=False)
        D_fake, D_fake_logits = self.discriminator(G, train=True, reuse=True)

        # Loss of Discriminator
        d_loss_real = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=D_real_logits,
                                                                             labels=tf.ones_like(D_real) * 0.7))
        d_loss_fake = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=D_fake_logits,
                                                                             labels=tf.zeros_like(D_fake)))
        self.d_loss = d_loss_real + d_loss_fake

        # Loss of Generator
        self.g_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=D_fake_logits,
                                                                             labels=tf.ones_like(D_fake)))

        # Test
        self.x_fake = self.generator(self.z, reuse=True, train=False)

        #######################################################
        #                   end of your code
        #######################################################
        # define var lists for generator and discriminator
        t_vars = tf.trainable_variables()

        self.d_vars = [var for var in t_vars if 'd_' in var.name]
        self.g_vars = [var for var in t_vars if 'g_' in var.name]

        self.saver = tf.train.Saver()

    def train(self, config):
        # create two optimizers for generator and discriminator,
        # and only update the corresponding variables.
        self.sample_z = np.random.uniform(-1, 1, size=(self.batch_size, self.z_dim))
        d_optim = tf.train.AdamOptimizer(config.learning_rate / 5, beta1=config.beta1) \
            .minimize(self.d_loss, var_list=self.d_vars)
        g_optim = tf.train.AdamOptimizer(config.learning_rate, beta1=config.beta1) \
            .minimize(self.g_loss, var_list=self.g_vars)
        try:
            self.sess.run(tf.global_variables_initializer())
        except:
            tf.initialize_all_variables().run()

        # load MNIST data
        mnist = tf.contrib.learn.datasets.load_dataset("mnist")
        data = mnist.train.images
        data = data.astype(np.float32)
        data_len = data.shape[0]
        data = np.reshape(data, [-1, 28, 28, 1])
        data = data * 2.0 - 1.0

        could_load, checkpoint_counter = self.load(self.checkpoint_dir)
        if could_load:
            self.counter = checkpoint_counter
            print(" [*] Load SUCCESS")
        else:
            print(" [!] Load failed...")

        for epoch in xrange(config.epoch):
            batch_idxs = min(data_len, config.train_size) // config.batch_size

            for idx in xrange(0, batch_idxs):
                batch_images = data[idx * config.batch_size:(idx + 1) * config.batch_size, :]
                #######################################################
                # TODO: Train your model here. Sample hidden z from
                # standard uniform distribution. In each step, run g_optim
                # twice to make sure that d_loss does not go to zero.
                # print the loss terms at each training step to monitor
                # the training process. Print sample images every
                # config.print_step steps.You may use function
                # save_images in utils.py to save images.
                #######################################################
                batch_z = np.random.uniform(-1, 1, [self.batch_size, self.z_dim]).astype(np.float32)

                _, d_loss = self.sess.run([d_optim, self.d_loss], feed_dict={self.x: batch_images, self.z: batch_z})
                _, g_loss = self.sess.run([g_optim, self.g_loss], feed_dict={self.x: batch_images, self.z: batch_z})

                if np.mod(self.counter, 10) == 1:
                    print("Epoch: [%2d] [%4d/%4d], d_loss: %.8f, g_loss: %.8f" % (epoch, idx, batch_idxs, d_loss,
                                                                                  g_loss))

                #######################################################
                #                   end of your code
                #######################################################

                self.counter += 1
                if np.mod(self.counter, 500) == 1:
                    self.save(config.checkpoint_dir, self.counter)

                if np.mod(self.counter, 100) == 0:
                    samples = self.sess.run(self.x_fake, feed_dict={self.z: self.sample_z})
                    save_images(samples, image_manifold_size(samples.shape[0]),
                                './{}/train_{:02d}_{:04d}.png'.format(config.sample_dir, epoch, idx + 1))


    @property
    def model_dir(self):
        return "{}_{}_{}_{}".format(
            self.dataset_name, self.batch_size,
            self.output_size, self.output_size)

    def save(self, checkpoint_dir, step):
        model_name = "DCGAN.model"
        checkpoint_dir = os.path.join(checkpoint_dir, self.model_dir)

        if not os.path.exists(checkpoint_dir):
            os.makedirs(checkpoint_dir)

        self.saver.save(self.sess,
                        os.path.join(checkpoint_dir, model_name),
                        global_step=step)

    def load(self, checkpoint_dir):
        import re
        print(" [*] Reading checkpoints...")
        checkpoint_dir = os.path.join(checkpoint_dir, self.model_dir)

        ckpt = tf.train.get_checkpoint_state(checkpoint_dir)
        if ckpt and ckpt.model_checkpoint_path:
            ckpt_name = os.path.basename(ckpt.model_checkpoint_path)
            self.saver.restore(self.sess, os.path.join(checkpoint_dir, ckpt_name))
            self.counter = int(next(re.finditer("(\d+)(?!.*\d)", ckpt_name)).group(0))
            print(" [*] Success to read {}".format(ckpt_name))
            return True, self.counter
        else:
            print(" [*] Failed to find a checkpoint")
            return False, 0
